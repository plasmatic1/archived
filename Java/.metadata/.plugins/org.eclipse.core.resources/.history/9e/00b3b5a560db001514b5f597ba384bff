package timepline;

import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.animation.TimelineBuilder;
import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Bounds;
import javafx.scene.GroupBuilder;
import javafx.scene.Scene;
import javafx.scene.SceneBuilder;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javafx.scene.paint.Color;
import javafx.scene.shape.LineBuilder;
import javafx.scene.shape.Rectangle;
import javafx.scene.shape.RectangleBuilder;
import javafx.stage.Stage;
import javafx.util.Duration;

@SuppressWarnings("deprecation")
public class Animations extends Application{
	
	static int SPEED = 3;
	static double PSPEED = 1;
	
	static double maxgravity = 5;
	static double gravity = 0;
	
	
	static int direction = 1;
	static double velocity = 0;
	
	static boolean canjump = true;
	static boolean isJumping = false;

	public Animations() {
		// TODO Auto-generated constructor stub
	}
	
	@Override
	public void start(Stage stg) throws Exception {
		Rectangle rect1 = RectangleBuilder.create()
				.x(400)
				.y(400)
				.fill(Color.AQUAMARINE)
				.stroke(Color.BLACK)
				.width(400)
				.height(100)
				.strokeWidth(5)
				.build();
		
		Rectangle player = RectangleBuilder.create()
				.x(0)
				.y(400)
				.fill(Color.MINTCREAM)
				.stroke(Color.BLACK)
				.width(100)
				.height(100)
				.strokeWidth(5)
				.build();
		
		KeyFrame aroundf = new KeyFrame(Duration.millis(10L), new EventHandler<ActionEvent>() {

			@Override
			public void handle(ActionEvent event) {
				if(rect1.getY() >= 900){
					direction = -1;
				}
				else if(rect1.getY() <= 0){
					direction = 1;
				}
				
				
				velocity += velocity < 5 ? 0.2 : 0;
				player.setY(player.getY() + velocity);
				player.setX(player.getX() + PSPEED);
				
				if(player.getX() >= 1000){
					player.setX(-100);
				}
				
				if(player.getY() >= 900){
					player.setY(900);
				}
				if(player.getY() <= 0){
					player.setY(0);
				}
				
				rect1.setY(rect1.getY() + SPEED * direction);
				
				if(player.intersects(getSideOfRect(rect1, ShapeSide.TOP)) && !isJumping){
					if(direction == 1){
						velocity = 0;
					}
					else if(direction == -1){
						velocity = SPEED * -1;
					}
				}
				
				else if(player.intersects(getSideOfRect(rect1, ShapeSide.BOTTOM))){
					velocity = SPEED;
					canjump = false;
				}
				
				isJumping = false;
				canjump = true;
			}
		});
		
		Timeline fromf = TimelineBuilder.create()
				.keyFrames(aroundf)
				.cycleCount(Timeline.INDEFINITE)
				.build();
		
		Scene scene = SceneBuilder.create()
				.root(GroupBuilder.create()
						.children(rect1, player).build())
				.width(1000)
				.height(1000)
				.fill(Color.GOLDENROD)
				.onKeyPressed(new EventHandler<KeyEvent>() {

					@Override
					public void handle(KeyEvent event) {
						if(event.getCode() == KeyCode.SPACE && canjump){
							velocity = -8;
							isJumping = true;
						}
						else if(event.getCode() == KeyCode.Q){
							SPEED++;
						}
						else if(event.getCode() == KeyCode.A){
							SPEED--;
						}
						else if(event.getCode() == KeyCode.W){
							PSPEED++;
						}
						else if(event.getCode() == KeyCode.S){
							PSPEED--;
						}
					}
				})
				.build();
		
		stg.setScene(scene);
		
		stg.show();
		fromf.play();
	}
	
	public static void main(String[] args){
		launch(args);
	}
	
	public Bounds getSideOfRect(Rectangle rect, ShapeSide side){
		if(side == ShapeSide.TOP){
			return LineBuilder.create()
					.startX(rect.getX())
					.startY(rect.getY())
					.endX(rect.getX() + rect.getWidth())
					.endY(rect.getY())
					.build().getLayoutBounds();
		}
		else if(side == ShapeSide.LEFT){
			return LineBuilder.create()
					.startX(rect.getX())
					.startY(rect.getY())
					.endX(rect.getX())
					.endY(rect.getY() + rect.getHeight())
					.build().getLayoutBounds();
		}
		else if(side == ShapeSide.RIGHT){
			return LineBuilder.create()
					.startX(rect.getX() + rect.getWidth())
					.startY(rect.getY())
					.endX(rect.getX() + rect.getWidth())
					.endY(rect.getY() + rect.getHeight())
					.build().getLayoutBounds();
		}
		else if(side == ShapeSide.BOTTOM){
			return LineBuilder.create()
					.startX(rect.getX())
					.startY(rect.getY() + rect.getHeight())
					.endX(rect.getX() + rect.getWidth())
					.endY(rect.getY() + rect.getHeight())
					.build().getLayoutBounds();
		}
		return null;
	}
}
